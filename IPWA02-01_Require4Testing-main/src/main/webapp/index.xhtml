<html   xmlns="http://www.w3.org/1999/xhtml"
        xmlns:h="http://xmlns.jcp.org/jsf/html"
        xmlns:p="http://primefaces.org/ui"
        xmlns:f="http://xmlns.jcp.org/jsf/core"
>
    <h:head>
        <title>Require4Testing</title>
        <link rel="icon" href="#{resource['images/home.png']}" type="image/png"/>
        <h:outputStylesheet library="webjars" name="primeflex/3.3.1/primeflex.min.css" />
        <h:outputStylesheet name="styles.css" />
    </h:head>
    <h:body>
        <div class="card">
            <h:form>
                <p:menubar hideDelay="500" styleClass="nav-menu">
                    <f:facet name="start">
                        <h:outputLink value="https://github.com/Jardin93/IPWA02-01_Require4Testing">
                            <p:graphicImage name="images/github-mark.svg" styleClass="menu-logo" />
                        </h:outputLink>
                    </f:facet>
                    <p:menuitem outcome="index" value="Home" icon="pi pi-home" />

                    <p:menuitem outcome="AnforderungHinzufügen" value="Anforderung erstellen" icon="pi pi-fw pi-plus" rendered="#{Service.rolle == 'Requirements Engineer'}"/>
                    <p:menuitem outcome="TestlaufHinzufügen" value="Testlauf erstellen" icon="pi pi-fw pi-plus" rendered="#{Service.rolle == 'Testmanager'}"/>
                    <p:menuitem outcome="TestfallHinzufügen" value="Testfall erstellen" icon="pi pi-fw pi-plus" rendered="#{Service.rolle == 'Testfallersteller'}"/>



                    <f:facet name="end">
                        <p:button outcome="LoginRegister" value="Login / Registrieren" icon="pi pi-fw pi-sign-in" styleClass="ui-button-info" rendered="#{!Service.loggedIn}"/>
                        <p:commandButton action="#{Service.abmelden}" value="Logout" icon="pi pi-fw pi-sign-out" styleClass="ui-button-info" rendered="#{Service.loggedIn}"/>
                    </f:facet>
                </p:menubar>
            </h:form>
        </div><br />
                <div class="align-items-center justify-content-center">
                    <h:form id="form_Anzeiger" rendered="#{Service.loggedIn}">
                        <p:dataView var="aufgabe" value="#{Service.aufgabenListe}" rows="12" paginator="true"
                                    paginatorTemplate="{CurrentPageReport} {FirstPageLink} {PreviousPageLink} {PageLinks} {NextPageLink} {LastPageLink}"
                                    gridIcon="pi pi-th-large" listIcon="pi pi-bars">

                            <p:dataViewGridItem>
                                <p:outputPanel class="aufgaben-grid-item card border-1">
                                    <div class="aufgaben-grid-item-content">
                                        <div>
                                            <i class="pi pi-tag aufgaben-category-icon"/>
                                            <span class="aufgaben-category">#{aufgabe.getClass().simpleName}</span>
                                            <div class="aufgaben-ersteller">Erstellt von: #{aufgabe.ersteller.username}</div>
                                            <div class="aufgaben-erstellt">Erstellt am: #{aufgabe.date}</div>
                                        </div>
                                        <br />
                                        <div class="aufgaben-name">ID: \##{aufgabe.id} Titel: #{aufgabe.titel}</div>
                                        <div class="aufgaben-beschreibung" style="border-style: ridge">Beschreibung:<br /> #{aufgabe.beschreibung}</div><br />

                                        <p:outputPanel rendered="#{aufgabe.getClass().simpleName == 'Anforderungen'}" style="border-style: ridge" >
                                            Liste der Testfälle:<br />
                                            <h:outputText value="#{Service.anzeigerTestfallTitelListe(aufgabe)}" escape="false" />
                                        </p:outputPanel>

                                        <p:outputPanel rendered="#{aufgabe.getClass().simpleName == 'Testfaelle'}">
                                            Zugeortneter Testlauf:
                                            <h:outputText value="#{Service.anzeigerTestlauf(aufgabe)}" escape="false" />
                                            <br />
                                            Zugeortnete Anforderung:
                                            <h:outputText value="#{Service.anzeigerAnforderung(aufgabe)}" escape="false" />
                                            <br />
                                            Last Update:
                                            <h:outputText value="#{Service.anzeigerLastUpdate(aufgabe)}" escape="false" />
                                            <br />
                                            Zugeortnete Status:
                                            <h:outputText value="#{Service.anzeigerStatus(aufgabe)}" escape="false" />
                                            <br />
                                            <div style="border-style: ridge">
                                                Testschritte:<br />
                                                <h:outputText value="#{Service.anzeigetTestschritte(aufgabe)}" escape="false" />
                                            </div>
                                        </p:outputPanel>

                                        <p:outputPanel rendered="#{aufgabe.getClass().simpleName == 'Testlaeufe'}">
                                            Zugeortnete Tester:
                                            <h:outputText value="#{Service.anzeigerTester(aufgabe)}" escape="false" />
                                            <br />
                                            <div style="border-style: ridge">
                                                Zugeortnete Testfälle:<br />
                                                <h:outputText value="#{Service.anzeigerTestfallTitelListe(aufgabe)}" escape="false"/>
                                            </div>
                                        </p:outputPanel>
                                        <div>
                                            <p:commandButton action="#{Service.aufgabeBearbeiten(aufgabe)}"
                                                             value="Bearbeiten" icon="pi pi-pencil"
                                                             rendered="#{((Service.angemeldetePerson.role == 'Tester' or Service.angemeldetePerson.role == 'Testfallersteller') and aufgabe.getClass().simpleName == 'Testfaelle')}"
                                                             />
                                        </div>
                                    </div>
                                </p:outputPanel>
                            </p:dataViewGridItem>

                            <p:dataViewListItem>
                                <p:outputPanel class="aufgaben-grid-item card border-1">
                                    <div class="aufgaben-list-item" style="border-style: solid; margin-bottom: 15px">
                                        <div class="aufgaben-list-detail">
                                            <i class="pi pi-tag aufgaben-category-icon"/>
                                            <span class="aufgaben-category">#{aufgabe.getClass().simpleName}</span>
                                            <div class="aufgaben-ersteller">Erstellt von: #{aufgabe.ersteller.username}</div>
                                            <div class="aufgaben-erstellt">Erstellt am: #{aufgabe.date}</div>
                                        </div>
                                        <br />
                                        <div class="aufgaben-name">ID: \##{aufgabe.id} Titel: #{aufgabe.titel}</div>
                                        <div class="aufgaben-beschreibung" style="border-style: ridge">Beschreibung:<br /> #{aufgabe.beschreibung}</div><br />

                                        <p:outputPanel rendered="#{aufgabe.getClass().simpleName == 'Anforderungen'}" style="border-style: ridge">
                                            Liste der Testfälle:<br />
                                            <h:outputText value="#{Service.anzeigerTestfallTitelListe(aufgabe)}" escape="false" />
                                        </p:outputPanel>

                                        <p:outputPanel rendered="#{aufgabe.getClass().simpleName == 'Testfaelle'}">
                                            Zugeortneter Testlauf:
                                            <h:outputText value="#{Service.anzeigerTestlauf(aufgabe)}" escape="false" />
                                            <br />
                                            Zugeortnete Anforderung:
                                            <h:outputText value="#{Service.anzeigerAnforderung(aufgabe)}" escape="false" />
                                            <br />
                                            Last Update:
                                            <h:outputText value="#{Service.anzeigerLastUpdate(aufgabe)}" escape="false" />
                                            <br />
                                            Zugeortnete Status:
                                            <h:outputText value="#{Service.anzeigerStatus(aufgabe)}" escape="false" />
                                            <br />
                                            <div style="border-style: ridge">
                                                Testschritte:<br />
                                                <h:outputText value="#{Service.anzeigetTestschritte(aufgabe)}" escape="false" />
                                            </div>
                                        </p:outputPanel>

                                        <p:outputPanel rendered="#{aufgabe.getClass().simpleName == 'Testlaeufe'}">
                                            Zugeortnete Tester:
                                            <h:outputText value="#{Service.anzeigerTester(aufgabe)}" escape="false" />
                                            <br />
                                            <div style="border-style: ridge">
                                                Zugeortnete Testfälle:<br />
                                                <h:outputText value="#{Service.anzeigerTestfallTitelListe(aufgabe)}" escape="false"/>
                                            </div>
                                        </p:outputPanel>
                                        <div>
                                            <p:commandButton action="#{Service.aufgabeBearbeiten(aufgabe)}"
                                                             value="Bearbeiten" icon="pi pi-pencil"
                                                             rendered="#{((Service.angemeldetePerson.role == 'Tester' or Service.angemeldetePerson.role == 'Testfallersteller') and aufgabe.getClass().simpleName == 'Testfaelle')}"
                                                             />
                                        </div>
                                    </div>
                                </p:outputPanel>
                            </p:dataViewListItem>
                        </p:dataView>
                    </h:form>
                </div>
    </h:body>
</html>